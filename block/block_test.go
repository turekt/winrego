package block

import (
	"reflect"
	"testing"
)

func TestBaseBlockMarshaling(t *testing.T) {
	baseBlockStart := []byte{
		// regf
		0x72, 0x65, 0x67, 0x66,
		// Sequence 1
		0x3c, 0x00, 0x00, 0x00,
		// Sequence 2
		0x3c, 0x00, 0x00, 0x00,
		// Last written timestamp
		0xc6, 0x9d, 0xb8, 0x1a, 0x3b, 0x9f, 0xce, 0x01,
		// Major
		0x01, 0x00, 0x00, 0x00,
		// Minor
		0x03, 0x00, 0x00, 0x00,
		// File type
		0x00, 0x00, 0x00, 0x00,
		// File format
		0x01, 0x00, 0x00, 0x00,
		// Root cell offset
		0x20, 0x00, 0x00, 0x00,
		// HBin size
		0x00, 0x70, 0x00, 0x00,
		// Clustering factor
		0x01, 0x00, 0x00, 0x00,
		// File name
		0x5c, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00,
		0x74, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x52, 0x00,
		0x6f, 0x00, 0x6f, 0x00, 0x74, 0x00, 0x5c, 0x00,
		0x53, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00,
		0x65, 0x00, 0x6d, 0x00, 0x33, 0x00, 0x32, 0x00,
		0x5c, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x6e, 0x00,
		0x66, 0x00, 0x69, 0x00, 0x67, 0x00, 0x5c, 0x00,
		0x53, 0x00, 0x41, 0x00, 0x4d, 0x00, 0x00, 0x00,
		// RmId
		0xc8, 0xac, 0x7a, 0x13, 0x7e, 0xae, 0xe3, 0x11,
		0x80, 0xbb, 0x90, 0xb1, 0x1c, 0x1c, 0xcb, 0x90,
		// LogId
		0xc8, 0xac, 0x7a, 0x13, 0x7e, 0xae, 0xe3, 0x11,
		0x80, 0xbb, 0x90, 0xb1, 0x1c, 0x1c, 0xcb, 0x90,
		// Flags
		0x00, 0x00, 0x00, 0x00,
		// TmId
		0xc9, 0xac, 0x7a, 0x13, 0x7e, 0xae, 0xe3, 0x11,
		0x80, 0xbb, 0x90, 0xb1, 0x1c, 0x1c, 0xcb, 0x90,
		// GUID signature
		0x72, 0x6d, 0x74, 0x6d,
		// Last reorganized timestamp
		0xa6, 0x84, 0x3b, 0xe1, 0x05, 0x45, 0xd2, 0x01,
	}
	checksum := []byte{
		// Checksum
		0x2a, 0x1e, 0x61, 0xd3,
	}
	baseBlockEnd := []byte{
		// ThawTmId
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,
		// ThawRmId
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
		0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00,
		// ThawLogId
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
		0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x00,
		// Boot type
		0xca, 0xfe, 0xfe, 0xca,
		// Boot recover
		0x01, 0x02, 0x01, 0x00,
	}

	// base block record:
	// - [0:176] baseBlockStart data
	// - [168:508] null
	// - [508:512] checksum
	// - [512:4088] null
	// - [4040:] baseBlockEnd data
	var recordBaseBlock [BaseBlockSize]byte
	copy(recordBaseBlock[:176], baseBlockStart)
	copy(recordBaseBlock[508:512], checksum)
	copy(recordBaseBlock[4040:], baseBlockEnd)

	bb := &BaseBlock{}
	if err := bb.unmarshal(recordBaseBlock[:]); err != nil {
		t.Errorf("failed unmarshaling base block: %v", err)
	}

	got, want := bb, &BaseBlock{
		RegfHeader:       0x66676572,
		Sequence1:        60,
		Sequence2:        60,
		LastWTimestamp:   130216515440516550,
		Major:            1,
		Minor:            3,
		FileType:         0,
		FileFormat:       1,
		RootCellOffset:   32,
		HBinSize:         28672,
		ClusteringFactor: 1,
		FileName: [64]byte{
			92, 0, 83, 0, 121, 0, 115, 0,
			116, 0, 101, 0, 109, 0, 82, 0,
			111, 0, 111, 0, 116, 0, 92, 0,
			83, 0, 121, 0, 115, 0, 116, 0,
			101, 0, 109, 0, 51, 0, 50, 0,
			92, 0, 67, 0, 111, 0, 110, 0,
			102, 0, 105, 0, 103, 0, 92, 0,
			83, 0, 65, 0, 77, 0, 0, 0,
		},
		RmId: [16]byte{
			200, 172, 122, 19, 126, 174, 227, 17,
			128, 187, 144, 177, 28, 28, 203, 144,
		},
		LogId: [16]byte{
			200, 172, 122, 19, 126, 174, 227, 17,
			128, 187, 144, 177, 28, 28, 203, 144,
		},
		Flags: 0,
		TmId: [16]byte{
			201, 172, 122, 19, 126, 174, 227, 17,
			128, 187, 144, 177, 28, 28, 203, 144,
		},
		GUIDSignature:  1836346738,
		LastRTimestamp: 131243230703092902,
		Reserved1:      [332]byte{},
		Checksum:       3546357290,
		Reserved2:      [3528]byte{},
		ThawTmId: [16]byte{
			1, 2, 3, 4, 5, 6, 7, 8,
			9, 10, 11, 12, 13, 14, 15, 0,
		},
		ThawRmId: [16]byte{
			17, 18, 19, 20, 21, 22, 23, 24,
			25, 26, 27, 28, 29, 30, 31, 0,
		},
		ThawLogId: [16]byte{
			33, 34, 35, 36, 37, 38, 39, 40,
			41, 42, 43, 44, 45, 46, 47, 0,
		},
		BootType:    3405709002,
		BootRecover: 66049,
	}
	if !reflect.DeepEqual(got, want) {
		t.Errorf("base block struct not equals (got|want):\n%+v\n%+v", got, want)
	}

	data, err := bb.marshal()
	if err != nil {
		t.Errorf("failed marshaling base block: %v", err)
	}

	if got, want := data, recordBaseBlock[:]; !reflect.DeepEqual(got, want) {
		t.Errorf("marshal bytes not equal to expected (got|want):\n%v\n%v", got, want)
	}
}
